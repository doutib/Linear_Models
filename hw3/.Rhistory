betas = replicate(1000,beta()["HT"])
beta()
#  Question 7 -------------------------------------------------------------
hist(betas)
abline(v = rho)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
#rho_hat = cor(X,Y)
#a = s1^4*(rho^2-1)
#b = 2*rho_hat*s1^3*s2*(rho^2-1)
#c = (rho^2-rho_hat^2)*s2^2*s1^2
#delta = b^2-4*a*c
#correction = (-b-sqrt(delta))/(2*a)
#Y=Y+correction*X
# Adjust mean and variance of Y again
Y = (Y-mean(Y))/sd(Y)*s2+mu2
# Correlation and covariance matrices
M = cbind(X,Y)
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(X=X,Y=Y,M=M,df=df,rho=rho))
}
data = generate_data()
X = data$X
Y = data$Y
M = data$M
rho = data$rho
# Correlation and covariance matrices
cor(M)
cov(M)
# Put into data frame
df = data$df
attach(df)
# Question 2 --------------------------------------------------------------
lm.fit = lm(WT ~ ., data = df)
lm.fit$coefficients
# First X and Y are random variables, not observed values. Here we know $\beta$ and do observe $\epsilon$.
# The model is not linear itself, i.e. BMI is not a linear function of the columns of X.
# The resuiduals are not gaussian.
par(mfrow=c(2,2))
plot(lm.fit)
par(mfrow=c(1,1))
# In particular, the sd of the residuals is not equal to 1:
sd(lm.fit$residuals)
# Question 3 --------------------------------------------------------------
# The true value of $\beta_1$, the coefficient associated with the height $HT$ is the value of $\rho$
# because of the relationship of the bivariate normal $WT=\rho HT+\sqrt{1-\rho^2}Z$ where $Z$ is $N(0,1)$.
beta = function(n=100){
data = generate_data(n)
df = data$df
lm.fit = lm(WT ~ HT+BMI, data = df)
lm.fit$coefficients
}
# The simulated value of $\beta_1$ is
beta1 = beta()["HT"]
beta1
# Question 4 --------------------------------------------------------------
# According to Theorem 2, page 43 of Freedman, OLS is conditionally unbiased,
# that is, $E(\hat{\beta}|X) = \beta$
#set.seed(21)
#beta_vect = Vectorize(beta)
#beta1s = beta_vect(seq(100,100000,by=100))[3,]
#plot(beta1s)
#abline(h = rho)
# Question 5 --------------------------------------------------------------
WT_hat = predict(lm.fit)
e = WT-WT_hat
# To see if the variables are correlated, wee look for some pattern in the plot of one against the other.
plot(eps,WT) # not correlated, seem to be independent
plot(eps,HT) # positively correlated -> dependent
plot(e,WT) # correlated in some quadratic way -> dependent
plot(e,HT) # correlated in some quadratic way -> dependent
# To see if two vectors are orthogonal, I compute their scalar product.
sum(e*WT) # orthogonal
sum(e*HT) # orthogonal
sum(eps*WT) # not orthogonal
sum(eps*HT) # not orthogonal
# Question 6 --------------------------------------------------------------
betas = replicate(1000,beta()["HT"])
beta()
#  Question 7 -------------------------------------------------------------
hist(betas)
abline(v = rho)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
eps = sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
#rho_hat = cor(X,Y)
#a = s1^4*(rho^2-1)
#b = 2*rho_hat*s1^3*s2*(rho^2-1)
#c = (rho^2-rho_hat^2)*s2^2*s1^2
#delta = b^2-4*a*c
#correction = (-b-sqrt(delta))/(2*a)
#Y=Y+correction*X
# Adjust mean and variance of Y again
Y = (Y-mean(Y))/sd(Y)*s2+mu2
# Correlation and covariance matrices
M = cbind(X,Y)
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(X=X,Y=Y,M=M,df=df,rho=rho,eps=eps))
}
data = generate_data()
X = data$X
Y = data$Y
M = data$M
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
# Put into data frame
df = data$df
attach(df)
# Question 2 --------------------------------------------------------------
lm.fit = lm(WT ~ ., data = df)
lm.fit$coefficients
# First X and Y are random variables, not observed values. Here we know $\beta$ and do observe $\epsilon$.
# The model is not linear itself, i.e. BMI is not a linear function of the columns of X.
# The resuiduals are not gaussian.
par(mfrow=c(2,2))
plot(lm.fit)
par(mfrow=c(1,1))
# In particular, the sd of the residuals is not equal to 1:
sd(lm.fit$residuals)
# Question 3 --------------------------------------------------------------
# The true value of $\beta_1$, the coefficient associated with the height $HT$ is the value of $\rho$
# because of the relationship of the bivariate normal $WT=\rho HT+\sqrt{1-\rho^2}Z$ where $Z$ is $N(0,1)$.
beta = function(n=100){
data = generate_data(n)
df = data$df
lm.fit = lm(WT ~ HT+BMI, data = df)
lm.fit$coefficients
}
# The simulated value of $\beta_1$ is
beta1 = beta()["HT"]
beta1
# Question 4 --------------------------------------------------------------
# According to Theorem 2, page 43 of Freedman, OLS is conditionally unbiased,
# that is, $E(\hat{\beta}|X) = \beta$
#set.seed(21)
#beta_vect = Vectorize(beta)
#beta1s = beta_vect(seq(100,100000,by=100))[3,]
#plot(beta1s)
#abline(h = rho)
# Question 5 --------------------------------------------------------------
WT_hat = predict(lm.fit)
e = WT-WT_hat
# To see if the variables are correlated, wee look for some pattern in the plot of one against the other.
plot(eps,WT) # not correlated, seem to be independent
plot(eps,HT) # positively correlated -> dependent
plot(e,WT) # correlated in some quadratic way -> dependent
plot(e,HT) # correlated in some quadratic way -> dependent
# To see if two vectors are orthogonal, I compute their scalar product.
sum(e*WT) # orthogonal
sum(e*HT) # orthogonal
sum(eps*WT) # not orthogonal
sum(eps*HT) # not orthogonal
# Question 6 --------------------------------------------------------------
betas = replicate(1000,beta()["HT"])
beta()
#  Question 7 -------------------------------------------------------------
hist(betas)
abline(v = rho)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
eps = sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
rho_hat = cor(X,Y)
a = s1^4*(rho^2-1)
b = 2*rho_hat*s1^3*s2*(rho^2-1)
c = (rho^2-rho_hat^2)*s2^2*s1^2
delta = b^2-4*a*c
correction = (-b-sqrt(delta))/(2*a)
Y=Y+correction*X
# Adjust mean and variance of Y again
Y = (Y-mean(Y))/sd(Y)*s2+mu2
# Correlation and covariance matrices
M = cbind(X,Y)
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
# Put into data frame
df = data$df
attach(df)
df
M = df[,1:2]
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
eps = sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
rho_hat = cor(X,Y)
a = s1^4*(rho^2-1)
b = 2*rho_hat*s1^3*s2*(rho^2-1)
c = (rho^2-rho_hat^2)*s2^2*s1^2
delta = b^2-4*a*c
correction = (-b-sqrt(delta))/(2*a)
Y=Y+correction*X
# Adjust mean and variance of Y again
Y = (Y-mean(Y))/sd(Y)*s2+mu2
# Correlation and covariance matrices
M = cbind(X,Y)
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
# Put into data frame
df = data$df
attach(df)
M = df[,1:2]
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
df
M = cbind(WT,HT)
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
#X = rnorm(n)
#Z = rnorm(n)
#Y = rho * X + sqrt(1-rho^2) * Z
#eps = sqrt(1-rho^2) * Z
## Adjust rho by transforming Y
#rho_hat = cor(X,Y)
#a = s1^4*(rho^2-1)
#b = 2*rho_hat*s1^3*s2*(rho^2-1)
#c = (rho^2-rho_hat^2)*s2^2*s1^2
#delta = b^2-4*a*c
#correction = (-b-sqrt(delta))/(2*a)
#Y=Y+correction*X
# Adjust mean and variance of Y again
Y = (Y-mean(Y))/sd(Y)*s2+mu2
# Correlation and covariance matrices
M = cbind(X,Y)
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
# Put into data frame
df = data$df
attach(df)
M = cbind(WT,HT)
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
#X = rnorm(n)
#Z = rnorm(n)
#Y = rho * X + sqrt(1-rho^2) * Z
#eps = sqrt(1-rho^2) * Z
## Adjust rho by transforming Y
#rho_hat = cor(X,Y)
#a = s1^4*(rho^2-1)
#b = 2*rho_hat*s1^3*s2*(rho^2-1)
#c = (rho^2-rho_hat^2)*s2^2*s1^2
#delta = b^2-4*a*c
#correction = (-b-sqrt(delta))/(2*a)
#Y=Y+correction*X
# Adjust mean and variance of Y again
Y = (Y-mean(Y))/sd(Y)*s2+mu2
# Correlation and covariance matrices
M = cbind(X,Y)
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
# Put into data frame
df = data$df
attach(df)
M = cbind(WT,HT)
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
eps = sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
rho_hat = cor(X,Y)
a = s1^4*(rho^2-1)
b = 2*rho_hat*s1^3*s2*(rho^2-1)
c = (rho^2-rho_hat^2)*s2^2*s1^2
delta = b^2-4*a*c
correction = (-b-sqrt(delta))/(2*a)
Y=Y+correction*X
# Adjust mean and variance of Y again
Y = (Y-mean(Y))/sd(Y)*s2+mu2
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
# Put into data frame
df = data$df
M = cbind(WT,HT)
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
# Parameters of variables
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
eps = sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
rho_hat = cor(X,Y)
a = s1^4*(rho^2-1)
b = 2*rho_hat*s1^3*s2*(rho^2-1)
c = (rho^2-rho_hat^2)*s2^2*s1^2
delta = b^2-4*a*c
correction = (-b-sqrt(delta))/(2*a)
Y=Y+correction*X
# Adjust means and variances
Y = (Y-mean(Y))/sd(Y)*s2+mu2
X = (X-mean(X))/sd(X)*s1+mu1
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
# Put into data frame
df = data$df
M = cbind(WT,HT)
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
detach(df)
detach(data)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
eps = sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
rho_hat = cor(X,Y)
a = s1^4*(rho^2-1)
b = 2*rho_hat*s1^3*s2*(rho^2-1)
c = (rho^2-rho_hat^2)*s2^2*s1^2
delta = b^2-4*a*c
correction = (-b-sqrt(delta))/(2*a)
Y=Y+correction*X
# Adjust means and variances
Y = (Y-mean(Y))/sd(Y)*s2+mu2
X = (X-mean(X))/sd(X)*s1+mu1
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
# Put into data frame
df = data$df
M = cbind(WT,HT)
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
###  HW 3   Doutre Thibault
# Question 1 --------------------------------------------------------------
generate_data = function(n = 100){
# Define parameters
rho = 0.7
mu1=180; s1=40; mu2=66; s2=3
# Define X, Y and Z with the bivariate normal relationship
X = rnorm(n)
Z = rnorm(n)
Y = rho * X + sqrt(1-rho^2) * Z
eps = sqrt(1-rho^2) * Z
# Adjust rho by transforming Y
rho_hat = cor(X,Y)
a = s1^4*(rho^2-1)
b = 2*rho_hat*s1^3*s2*(rho^2-1)
c = (rho^2-rho_hat^2)*s2^2*s1^2
delta = b^2-4*a*c
correction = (-b-sqrt(delta))/(2*a)
Y=Y+correction*X
# Adjust means and variances
Y = (Y-mean(Y))/sd(Y)*s2+mu2
X = (X-mean(X))/sd(X)*s1+mu1
# Put into data frame
df = data.frame(WT = Y,
HT = X,
BMI = 703 * Y / X^2)
# Output
return(list(df=df,rho=rho,eps=eps))
}
data = generate_data()
M = cbind(WT,HT)
rho = data$rho
eps = data$eps
# Correlation and covariance matrices
cor(M)
cov(M)
# Parameters o
WT
rm(list = ls())
rm(list = ls())
WT
