{
    "contents" : "\n\n# Load data ---------------------------------------------------------------\n\nload(\"HW10.rda\")\n\n## shuffle\ndata = data[sample(nrow(data)),]\n\n# Full Model, R2 ----------------------------------------------------------\n\n## # OLS fit\nlm.fit = lm(Y~., data=data)\n\n## # R2\nR2 = var(lm.fit$fitted.values)/var(data$Y)\nR2\n\n## # Cross validated R2\n\nR2_cv = function(data, nfold, formula=\"Y~.\"){\n  # Compute R2 based on cross validated data\n  Y_cv = c()\n  nrows = nrow(data)\n  for (i in seq(0, nrows-nfold, by=nrows/nfold)){\n    print(i+1)\n    print(nfold+i)\n    test = i:(nfold+i)\n    train = -test\n    lm.fit = lm(formula, data=data[train,])\n    Ytest = predict(lm.fit, data[test,])\n    Y_cv = c(Y_cv, Ytest)\n  }\n  var(Y_cv)/var(data$Y)\n}\nnames(lm.fit)\nnfold = 10\nR2_cv10 = R2_cv(data, 10)\nR2_cv10\n\n\nsummary(lm.fit)\n\n\n\n# Backward selection ------------------------------------------------------\n\n## # Cross validated MSE\n\nMSE_cv = function(data, nfold, formula=\"Y~.\"){\n  # Compute R2 based on cross validated data\n  Y_cv = c()\n  nrows = nrow(data)\n  MSE_test = c()\n  MSE_train = c()\n  for (i in seq(0, nrows-nfold, by=nrows/nfold)){\n    test = (i+1):(nfold+i)\n    train = -test\n    lm.fit = lm(formula, data=data[train,])\n    Ytest = predict(lm.fit, data[test,])\n    MSE_test = c(MSE_test, mean((data$Y[test]-Ytest)^2))\n    MSE_train = c(MSE_train, mean((data$Y[train]-lm.fit$fitted.values)^2))\n  }\n  # Training error based on best model\n  # Test error based on cross validation (mean)\n  return(list(test = mean(MSE_test), train = min(MSE_train)))\n  \n}\n\nMSE_cv(data, nfold)\n\n## # Remove less significant feature from lm.fit\n\nbackward_lm = function(data){\n  # Initialize with OLS\n  formula = \"Y~.\"\n  lm.fit = lm(formula, data=data)\n  # Initialize outputs\n  MSE_train = c()\n  MSE_test = c()\n  next_to_remove = \"\"\n  variables = c()\n  while(length(names(lm.fit$model))>1){\n    MSE = MSE_cv(data, 10, formula)\n    MSE_train = c(MSE_train, MSE$train)\n    MSE_test = c(MSE_test, MSE$test)\n    t_values = coef(summary(lm.fit))[, \"t value\"]\n    # Variable with smallest t-value\n    next_to_remove = names(which.min(t_values))\n    # Store removed variables in the order\n    variables = c(variables,next_to_remove)\n    # Update formula\n    formula = paste(formula,\"-\",next_to_remove,sep=\"\")\n    # Update model using new formula\n    lm.fit = update(lm.fit, formula)\n  }\n  # Intercept only\n  MSE = MSE_cv(data, 10, formula)\n  MSE_train = c(MSE_train, MSE$train)\n  MSE_test = c(MSE_test, MSE$test)\n  return(list(variables = variables, MSE_test = MSE_test, MSE_train = MSE_train))\n}\n\nbackward = backward_lm(data)\nbackward\n  \n# Forward selection -------------------------------------------------------\n\nforward_lm = function(data){\n  names = names(data)[-1]\n  # Initialize outputs\n  MSE_train = c()\n  MSE_test = c()\n  variables = c()\n  # Intercept only\n  formula = \"Y~1\"\n  MSE = MSE_cv(data, 10, formula)\n  MSE_train = c(MSE_train, MSE$train)\n  MSE_test = c(MSE_test, MSE$test)\n  while(length(names)>0){\n    ## Find best variable to add to the model\n    best_new = \"\"\n    best_MSE = Inf \n    for (variable in names){\n      formula_test = paste(formula,\"+\",variable,sep=\"\")\n      # Update MSE using the cross validated training MSE\n      MSE = MSE_cv(data, 10, formula_test)$train\n      if (MSE<best_MSE){\n        best_MSE = MSE\n        best_new = variable\n        }\n    }\n    # Update names\n    names = names[-which(names==best_new)]\n    ## Update formula\n    formula = paste(formula,\"+\",best_new,sep=\"\")\n    ## Update data\n    MSE = MSE_cv(data, 10, formula)\n    MSE_train = c(MSE_train, MSE$train)\n    MSE_test = c(MSE_test, MSE$test)\n    variables = c(variables,best_new)\n  }\n  return(list(variables = variables, MSE_test = MSE_test, MSE_train = MSE_train))\n}\n\nforward = forward_lm(data)\nforward\n\n# Plot results ------------------------------------------------------------\n\nymax = max(max(backward$MSE_test,\n               backward$MSE_train,\n               forward$MSE_train,\n               forward$MSE_test))\nymin = min(min(backward$MSE_test,\n               backward$MSE_train,\n               forward$MSE_train,\n               forward$MSE_test))\n\n## Backward selection\n\nplot(0:20,rev(backward$MSE_test), col = \"darkblue\", type=\"b\",\n     xlab = \"Number of features\",\n     ylab = \"MSE\",\n     main = \"Forward and Backward selection\",\n     ylim = c(ymin,ymax))\n\nlines(rev(backward$MSE_train), col = \"lightblue\", type=\"b\")\n\nabline(v=which.min(rev(backward$MSE_test)),col=\"darkblue\",lty=2)\nabline(v=which.min(rev(backward$MSE_train)),col=\"lightblue\",lty=2)\n\n\n## Forward selection\n\nlines(forward$MSE_train, col = \"red1\", type=\"b\")\nlines(forward$MSE_test, col = \"darkred\", type=\"b\")\n\nabline(v=which.min(forward$MSE_test),col=\"darkred\",lty=4)\nabline(v=which.min(forward$MSE_train),col=\"red1\",lty=4)\n\n## Legend\nlegend(\"bottomleft\", \n       c(\"Forward-Train\",\"Forward-Test\",\"Backward-Train\",\"Backward-Test\"), \n       col = c(\"lightblue\",\"red1\",\"darkblue\",\"darkred\"),lwd=1)\n\n",
    "created" : 1460431886299.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3129366403",
    "id" : "3AC41E3B",
    "lastKnownWriteTime" : 1460696154,
    "path" : "~/Documents/stat230A/hw10/DoutreThibaultHW10.R",
    "project_path" : "DoutreThibaultHW10.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}